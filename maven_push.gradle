// The Maven plugin adds support for deploying artifacts to Maven repositories.
// 一个可以让你把库上传到maven仓库的插件
apply plugin: 'maven'
// The signing plugin adds the ability to digitally sign built files and artifacts. These digital signatures can then be used to prove who built the artifact the signature is attached to as well as other information such as when the signature was generated.
// 对库文件进行数字签名的插件,可以通过签名知道谁创建了这个库文件,签名的时间等等信息
//apply plugin: 'signing'

// 声明变量记录maven库地址
def mavenRepositoryUrl
// 判断是发布到正式库,还是snapshots库
if (isReleaseBuild()) {
	println 'RELEASE BUILD'
	// 下面的库地址指向的是我们私有仓库的Releases 仓库
	mavenRepositoryUrl = RELEASE_REPOSITORY_URL
} else {
	println 'SNAPSHOTS BUILD'
	// 下面的库地址指向的是我们私有仓库的snapshots 仓库
	mavenRepositoryUrl = SNAPSHOT_REPOSITORY_URL
}
// NEXUS_USERNAME等变量在我们主项目的gradle.properties中可以找到
def getRepositoryUsername() {
	return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
	return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}
// 根据我们在likelib下gradle.properties中声明的版本名称,来分辨是Release版本还是 snapshots版本
def isReleaseBuild() {
	return !VERSION_NAME.contains("SNAPSHOT");
}

//"afterEvaluate是什么鸟？你可以理解为在配置阶段要结束，项目评估完会走到这一步。" 引用自http://jiajixin.cn/2015/08/07/gradle-android/
afterEvaluate { project ->
	// 我们声明我们要执行的上传到maven的task
	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment  }
				// 我们类比下compile com.squareup.okhttp:okhttp:2.7.0
				// artifactId 对应com.squareup.okhttp; groupId 对应okhttp;version对应2.7.0
				// 这样就类似坐标的方式定位到了制定的库文件
				pom.artifactId = POM_ARTIFACT_ID
				pom.groupId = POM_GROUP_ID
				pom.version = VERSION_NAME

				// 授权验证,这里也就是你登陆搭建的私服服务器时候的用户名\密码
				repository(url: mavenRepositoryUrl) {
					authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
				}
			}
		}
	}

	// 生成sources.jar
	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	// 产生相关配置文件的任务
	artifacts { archives sourcesJar }

}
